// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AccountPassword is an object representing the database table.
type AccountPassword struct { // アカウントID
	AccountID int64 `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	// ハッシュ済みパスワード
	HashedPassword string `boil:"hashed_password" json:"hashed_password" toml:"hashed_password" yaml:"hashed_password"`
	// パスワード設定日時
	SetAt time.Time `boil:"set_at" json:"set_at" toml:"set_at" yaml:"set_at"`
	// 作成日時
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// 更新日時
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *accountPasswordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L accountPasswordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AccountPasswordColumns = struct {
	AccountID      string
	HashedPassword string
	SetAt          string
	CreatedAt      string
	UpdatedAt      string
}{
	AccountID:      "account_id",
	HashedPassword: "hashed_password",
	SetAt:          "set_at",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var AccountPasswordTableColumns = struct {
	AccountID      string
	HashedPassword string
	SetAt          string
	CreatedAt      string
	UpdatedAt      string
}{
	AccountID:      "account_password.account_id",
	HashedPassword: "account_password.hashed_password",
	SetAt:          "account_password.set_at",
	CreatedAt:      "account_password.created_at",
	UpdatedAt:      "account_password.updated_at",
}

// Generated where

var AccountPasswordWhere = struct {
	AccountID      whereHelperint64
	HashedPassword whereHelperstring
	SetAt          whereHelpertime_Time
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	AccountID:      whereHelperint64{field: "`account_password`.`account_id`"},
	HashedPassword: whereHelperstring{field: "`account_password`.`hashed_password`"},
	SetAt:          whereHelpertime_Time{field: "`account_password`.`set_at`"},
	CreatedAt:      whereHelpertime_Time{field: "`account_password`.`created_at`"},
	UpdatedAt:      whereHelpertime_Time{field: "`account_password`.`updated_at`"},
}

// AccountPasswordRels is where relationship names are stored.
var AccountPasswordRels = struct {
}{}

// accountPasswordR is where relationships are stored.
type accountPasswordR struct {
}

// NewStruct creates a new relationship struct
func (*accountPasswordR) NewStruct() *accountPasswordR {
	return &accountPasswordR{}
}

// accountPasswordL is where Load methods for each relationship are stored.
type accountPasswordL struct{}

var (
	accountPasswordAllColumns            = []string{"account_id", "hashed_password", "set_at", "created_at", "updated_at"}
	accountPasswordColumnsWithoutDefault = []string{"account_id", "hashed_password", "set_at"}
	accountPasswordColumnsWithDefault    = []string{"created_at", "updated_at"}
	accountPasswordPrimaryKeyColumns     = []string{"account_id"}
	accountPasswordGeneratedColumns      = []string{}
)

type (
	// AccountPasswordSlice is an alias for a slice of pointers to AccountPassword.
	// This should almost always be used instead of []AccountPassword.
	AccountPasswordSlice []*AccountPassword
	// AccountPasswordHook is the signature for custom AccountPassword hook methods
	AccountPasswordHook func(context.Context, boil.ContextExecutor, *AccountPassword) error

	accountPasswordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	accountPasswordType                 = reflect.TypeOf(&AccountPassword{})
	accountPasswordMapping              = queries.MakeStructMapping(accountPasswordType)
	accountPasswordPrimaryKeyMapping, _ = queries.BindMapping(accountPasswordType, accountPasswordMapping, accountPasswordPrimaryKeyColumns)
	accountPasswordInsertCacheMut       sync.RWMutex
	accountPasswordInsertCache          = make(map[string]insertCache)
	accountPasswordUpdateCacheMut       sync.RWMutex
	accountPasswordUpdateCache          = make(map[string]updateCache)
	accountPasswordUpsertCacheMut       sync.RWMutex
	accountPasswordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var accountPasswordAfterSelectHooks []AccountPasswordHook

var accountPasswordBeforeInsertHooks []AccountPasswordHook
var accountPasswordAfterInsertHooks []AccountPasswordHook

var accountPasswordBeforeUpdateHooks []AccountPasswordHook
var accountPasswordAfterUpdateHooks []AccountPasswordHook

var accountPasswordBeforeDeleteHooks []AccountPasswordHook
var accountPasswordAfterDeleteHooks []AccountPasswordHook

var accountPasswordBeforeUpsertHooks []AccountPasswordHook
var accountPasswordAfterUpsertHooks []AccountPasswordHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AccountPassword) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountPasswordAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AccountPassword) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountPasswordBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AccountPassword) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountPasswordAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AccountPassword) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountPasswordBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AccountPassword) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountPasswordAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AccountPassword) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountPasswordBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AccountPassword) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountPasswordAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AccountPassword) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountPasswordBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AccountPassword) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range accountPasswordAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAccountPasswordHook registers your hook function for all future operations.
func AddAccountPasswordHook(hookPoint boil.HookPoint, accountPasswordHook AccountPasswordHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		accountPasswordAfterSelectHooks = append(accountPasswordAfterSelectHooks, accountPasswordHook)
	case boil.BeforeInsertHook:
		accountPasswordBeforeInsertHooks = append(accountPasswordBeforeInsertHooks, accountPasswordHook)
	case boil.AfterInsertHook:
		accountPasswordAfterInsertHooks = append(accountPasswordAfterInsertHooks, accountPasswordHook)
	case boil.BeforeUpdateHook:
		accountPasswordBeforeUpdateHooks = append(accountPasswordBeforeUpdateHooks, accountPasswordHook)
	case boil.AfterUpdateHook:
		accountPasswordAfterUpdateHooks = append(accountPasswordAfterUpdateHooks, accountPasswordHook)
	case boil.BeforeDeleteHook:
		accountPasswordBeforeDeleteHooks = append(accountPasswordBeforeDeleteHooks, accountPasswordHook)
	case boil.AfterDeleteHook:
		accountPasswordAfterDeleteHooks = append(accountPasswordAfterDeleteHooks, accountPasswordHook)
	case boil.BeforeUpsertHook:
		accountPasswordBeforeUpsertHooks = append(accountPasswordBeforeUpsertHooks, accountPasswordHook)
	case boil.AfterUpsertHook:
		accountPasswordAfterUpsertHooks = append(accountPasswordAfterUpsertHooks, accountPasswordHook)
	}
}

// One returns a single accountPassword record from the query.
func (q accountPasswordQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AccountPassword, error) {
	o := &AccountPassword{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for account_password")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AccountPassword records from the query.
func (q accountPasswordQuery) All(ctx context.Context, exec boil.ContextExecutor) (AccountPasswordSlice, error) {
	var o []*AccountPassword

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AccountPassword slice")
	}

	if len(accountPasswordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AccountPassword records in the query.
func (q accountPasswordQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count account_password rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q accountPasswordQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if account_password exists")
	}

	return count > 0, nil
}

// AccountPasswords retrieves all the records using an executor.
func AccountPasswords(mods ...qm.QueryMod) accountPasswordQuery {
	mods = append(mods, qm.From("`account_password`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`account_password`.*"})
	}

	return accountPasswordQuery{q}
}

// FindAccountPassword retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAccountPassword(ctx context.Context, exec boil.ContextExecutor, accountID int64, selectCols ...string) (*AccountPassword, error) {
	accountPasswordObj := &AccountPassword{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `account_password` where `account_id`=?", sel,
	)

	q := queries.Raw(query, accountID)

	err := q.Bind(ctx, exec, accountPasswordObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from account_password")
	}

	if err = accountPasswordObj.doAfterSelectHooks(ctx, exec); err != nil {
		return accountPasswordObj, err
	}

	return accountPasswordObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AccountPassword) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no account_password provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountPasswordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	accountPasswordInsertCacheMut.RLock()
	cache, cached := accountPasswordInsertCache[key]
	accountPasswordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			accountPasswordAllColumns,
			accountPasswordColumnsWithDefault,
			accountPasswordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(accountPasswordType, accountPasswordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(accountPasswordType, accountPasswordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `account_password` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `account_password` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `account_password` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, accountPasswordPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into account_password")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.AccountID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for account_password")
	}

CacheNoHooks:
	if !cached {
		accountPasswordInsertCacheMut.Lock()
		accountPasswordInsertCache[key] = cache
		accountPasswordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AccountPassword.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AccountPassword) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	accountPasswordUpdateCacheMut.RLock()
	cache, cached := accountPasswordUpdateCache[key]
	accountPasswordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			accountPasswordAllColumns,
			accountPasswordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update account_password, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `account_password` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, accountPasswordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(accountPasswordType, accountPasswordMapping, append(wl, accountPasswordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update account_password row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for account_password")
	}

	if !cached {
		accountPasswordUpdateCacheMut.Lock()
		accountPasswordUpdateCache[key] = cache
		accountPasswordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q accountPasswordQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for account_password")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for account_password")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AccountPasswordSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountPasswordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `account_password` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, accountPasswordPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in accountPassword slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all accountPassword")
	}
	return rowsAff, nil
}

var mySQLAccountPasswordUniqueColumns = []string{
	"account_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AccountPassword) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no account_password provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountPasswordColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAccountPasswordUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	accountPasswordUpsertCacheMut.RLock()
	cache, cached := accountPasswordUpsertCache[key]
	accountPasswordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			accountPasswordAllColumns,
			accountPasswordColumnsWithDefault,
			accountPasswordColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			accountPasswordAllColumns,
			accountPasswordPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert account_password, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`account_password`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `account_password` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(accountPasswordType, accountPasswordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(accountPasswordType, accountPasswordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for account_password")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(accountPasswordType, accountPasswordMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for account_password")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for account_password")
	}

CacheNoHooks:
	if !cached {
		accountPasswordUpsertCacheMut.Lock()
		accountPasswordUpsertCache[key] = cache
		accountPasswordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AccountPassword record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AccountPassword) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AccountPassword provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), accountPasswordPrimaryKeyMapping)
	sql := "DELETE FROM `account_password` WHERE `account_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from account_password")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for account_password")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q accountPasswordQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no accountPasswordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from account_password")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for account_password")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AccountPasswordSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(accountPasswordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountPasswordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `account_password` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, accountPasswordPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from accountPassword slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for account_password")
	}

	if len(accountPasswordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AccountPassword) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAccountPassword(ctx, exec, o.AccountID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountPasswordSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AccountPasswordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountPasswordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `account_password`.* FROM `account_password` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, accountPasswordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AccountPasswordSlice")
	}

	*o = slice

	return nil
}

// AccountPasswordExists checks if the AccountPassword row exists.
func AccountPasswordExists(ctx context.Context, exec boil.ContextExecutor, accountID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `account_password` where `account_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, accountID)
	}
	row := exec.QueryRowContext(ctx, sql, accountID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if account_password exists")
	}

	return exists, nil
}

// Exists checks if the AccountPassword row exists.
func (o *AccountPassword) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AccountPasswordExists(ctx, exec, o.AccountID)
}
