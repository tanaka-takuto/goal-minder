package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	graphql_model "goal-minder/adapter/graphql/model"
	"goal-minder/adapter/graphql/vo"
	"goal-minder/cmd/di"
	modelContext "goal-minder/domain/context"
	"goal-minder/domain/model"
	"goal-minder/domain/usecase"
	"goal-minder/infra/db"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input *graphql_model.LoginInput) (graphql_model.LoginPayload, error) {
	uInput, vErr := usecase.NewLoginInput(input.Email, input.Password)
	if vErr != nil {
		return graphql_model.NewValidationError(*vErr), nil
	}

	account, incorrectEmailOrPasswordError, err := di.LoginUsecase().Execute(ctx, db.Con, *uInput)
	if err != nil {
		return nil, err
	} else if incorrectEmailOrPasswordError != nil {
		return graphql_model.IncorrectEmailOrPasswordError{Message: incorrectEmailOrPasswordError.Error()}, nil
	}

	// Cookieに認証トークンを設定
	authTokenClaims := model.NewAuthTokenClaims(account.ID)
	authToken := authTokenClaims.Encode()
	modelContext.GetAuthorizationHelper(ctx).SetAuthorizationIntoCookie(authToken)

	return graphql_model.LoginSuccess{
		Account: &graphql_model.Account{
			ID:    vo.NewAccountID(account.ID).String(),
			Name:  string(account.Name),
			Email: string(account.Email),
		},
	}, nil
}
